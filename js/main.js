!function(c){var I={};function g(n){if(I[n])return I[n].exports;var r=I[n]={i:n,l:!1,exports:{}};return c[n].call(r.exports,r,r.exports,g),r.l=!0,r.exports}g.m=c,g.c=I,g.d=function(c,I,n){g.o(c,I)||Object.defineProperty(c,I,{enumerable:!0,get:n})},g.r=function(c){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(c,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(c,"__esModule",{value:!0})},g.t=function(c,I){if(1&I&&(c=g(c)),8&I)return c;if(4&I&&"object"==typeof c&&c&&c.__esModule)return c;var n=Object.create(null);if(g.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:c}),2&I&&"string"!=typeof c)for(var r in c)g.d(n,r,function(I){return c[I]}.bind(null,r));return n},g.n=function(c){var I=c&&c.__esModule?function(){return c.default}:function(){return c};return g.d(I,"a",I),I},g.o=function(c,I){return Object.prototype.hasOwnProperty.call(c,I)},g.p="",g(g.s=0)}([function(module,exports,__webpack_require__){"use strict";eval('\r\n\r\nif ("serviceWorker" in navigator) {\r\n  window.addEventListener("load", function () {\r\n    navigator.serviceWorker.register("serviceworker.js").then(\r\n      function (registration) {\r\n        console.log(\r\n          "ServiceWorker registration successful with scope: ",\r\n          registration.scope\r\n        );\r\n      },\r\n      function (err) {\r\n        console.log("ServiceWorker registration failed: ", err);\r\n      }\r\n    );\r\n  });\r\n}\r\nconsole.log(`it works`);\r\n\r\nconst ASTEROID_NUMBER = 2;\r\nconst ASTEROID_SIZE = 50;\r\nconst ASTEROID_SPEED = 40;\r\nconst ASTEROID_VERT = 10;\r\nconst ASTEROID_JAGGENDESS = 0.5;\r\nconst BLINK = 0.1;\r\nconst FPS = 30;\r\nconst GAME_LIVE = 3;\r\nconst INVISIBILITY = 3;\r\nconst LASER_MAX = 120;\r\nconst LASER_SPEED = 500;\r\nconst POINTS_FOR_LARGE_ASTEROID = 10;\r\nconst POINTS_FOR_SMALL_ASTEROID = 20;\r\nconst SHIP_SIZE = 30;\r\nconst SHIP_FORWARD = 5;\r\nconst SHIP_EXPLODEDURATION = 1;\r\nconst TURN_SPEED = 270;\r\nconst TEXT_FADE_TIME = 3;\r\n\r\nlet asteroids = [];\r\nlet canvas = document.getElementById("gameCanvas");\r\nlet ctx = canvas.getContext("2d");\r\nlet hue = 0;\r\nlet level;\r\nlet lives = 3;\r\nlet livesColour;\r\nlet pause = false;\r\nlet ship;\r\nlet text;\r\nlet textAlpha;\r\nlet score;\r\n\r\nlet crushing = new soundEffect("assets/sounds/Crushing.wav", 1.0, 5);\r\nlet shoot = new soundEffect("assets/sounds/Shoot.wav", 0.4, 15);\r\nlet shipReturn = new soundEffect("assets/sounds/Fast.wav", 1.0, 5);\r\nlet shipBlowingUp = new soundEffect("assets/sounds/Ship_Explosion.wav");\r\nlet rocketThruster = new soundEffect("assets/sounds/Rocket_Thrusters.wav");\r\nlet tada = new soundEffect("assets/sounds/Tada.wav", 0.5, 1);\r\n\r\nfunction soundEffect(src, soundVolume = 1.0, maxSeries = 1) {\r\n  let shootSeries = this.shootSeries;\r\n  let streams = this.streams;\r\n  shootSeries = 1;\r\n  streams = [];\r\n  for (let i = 0; i <= maxSeries; i++) {\r\n    streams.push(new Audio(src));\r\n    streams[i].volume = soundVolume;\r\n  }\r\n  this.play = function () {\r\n    shootSeries = (shootSeries + 1) % maxSeries;\r\n    streams[shootSeries].play();\r\n  };\r\n  this.stop = function () {\r\n    streams[shootSeries].pause();\r\n    streams[shootSeries].currentTime = 0;\r\n  };\r\n}\r\n\r\nnewGame();\r\n\r\nfunction StartStop() {\r\n  window.setInterval(() => {\r\n    if (!pause) {\r\n      UPDATE();\r\n    }\r\n  }, 30);\r\n}\r\nStartStop();\r\n\r\ndocument.addEventListener("keydown", keyDown);\r\ndocument.addEventListener("keyup", keyUp);\r\n\r\nfunction keyDown(e) {\r\n  if (ship.dead) {\r\n    return;\r\n  }\r\n  hue = hue + 10;\r\n  switch (e.keyCode) {\r\n    case 32:\r\n      shootLaser();\r\n      break;\r\n    case 37:\r\n      ship.rotate = ((TURN_SPEED / 180) * Math.PI) / FPS;\r\n      break;\r\n    case 38:\r\n      ship.moveForward = true;\r\n      break;\r\n    case 39:\r\n      ship.rotate = ((-TURN_SPEED / 180) * Math.PI) / FPS;\r\n      break;\r\n    case 40:\r\n      ship.moveReturn = true;\r\n      break;\r\n    case 80:\r\n      pause = !pause;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n}\r\n\r\nfunction keyUp(e) {\r\n  if (ship.dead) {\r\n    return;\r\n  }\r\n  switch (e.keyCode) {\r\n    case 32:\r\n      ship.canShoot = true;\r\n      break;\r\n    case 37:\r\n      ship.rotate = 0;\r\n      break;\r\n    case 38:\r\n      ship.moveForward = false;\r\n      break;\r\n    case 39:\r\n      ship.rotate = 0;\r\n      break;\r\n    case 40:\r\n      ship.moveReturn = false;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n}\r\n\r\nfunction newGame() {\r\n  level = 0;\r\n  score = 0;\r\n  lives = GAME_LIVE;\r\n  ship = newShip();\r\n  nextLevel();\r\n}\r\n\r\nfunction gameOver() {\r\n  ship.dead = true;\r\n  text = "Game Over";\r\n  textAlpha = 1.0;\r\n}\r\n\r\nfunction nextLevel() {\r\n  text = "Level " + (level + 1);\r\n  textAlpha = 1.0;\r\n  createAsteroids();\r\n  tada.play();\r\n}\r\n\r\nfunction drawShip(x, y, a, colour = "white") {\r\n  ctx.strokeStyle = colour;\r\n  ctx.lineWidth = SHIP_SIZE / FPS;\r\n  ctx.beginPath();\r\n  ctx.moveTo(\r\n    x + (4 / 3) * ship.r * Math.cos(a),\r\n    y - (4 / 3) * ship.r * Math.sin(a)\r\n  );\r\n  ctx.lineTo(\r\n    x - ship.r * ((2 / 3) * Math.cos(a) + Math.sin(a)),\r\n    y + ship.r * ((2 / 3) * Math.sin(a) - Math.cos(a))\r\n  );\r\n  ctx.lineTo(\r\n    x - ship.r * ((2 / 3) * Math.cos(a) - Math.sin(a)),\r\n    y + ship.r * ((2 / 3) * Math.sin(a) + Math.cos(a))\r\n  );\r\n  ctx.closePath();\r\n  ctx.stroke();\r\n}\r\n\r\nfunction newShip() {\r\n  return {\r\n    x: Math.floor(Math.random() * canvas.width),\r\n    y: Math.floor(Math.random() * canvas.height),\r\n    r: SHIP_SIZE / 2,\r\n    a: Math.PI / 2,\r\n    blinkNum: 30,\r\n    blinkTime: 3,\r\n    canShoot: true,\r\n    dead: false,\r\n    exploadingTime: 0,\r\n    forward: {\r\n      x: 0,\r\n      y: 0,\r\n    },\r\n    lasers: [],\r\n    moveForward: false,\r\n    moveReturn: false,\r\n    motion: 0.9,\r\n    rotate: 0,\r\n  };\r\n}\r\n\r\nfunction createAsteroids() {\r\n  asteroids = [];\r\n  let x, y;\r\n  for (let i = 0; i < ASTEROID_NUMBER + level; i++) {\r\n    do {\r\n      x = Math.floor(Math.random() * canvas.width);\r\n      y = Math.floor(Math.random() * canvas.height);\r\n    } while (safetyBuffer(ship.x, ship.y, x, y) < ASTEROID_SIZE * 2 + ship.r);\r\n    asteroids.push(newAsteroid(x, y, Math.ceil(ASTEROID_SIZE / 2)));\r\n  }\r\n}\r\n\r\nfunction newAsteroid(x, y, r) {\r\n  let asteroidLevel = 1 + 0.1 * level;\r\n  let asteroid = {\r\n    x: x,\r\n    y: y,\r\n    vertically: Math.random() * 2 + ASTEROID_VERT,\r\n    xv:\r\n      ((Math.random() * ASTEROID_SPEED * asteroidLevel) / FPS) *\r\n      (Math.random() < 0.5 ? 1 : -1),\r\n    yv:\r\n      ((Math.random() * ASTEROID_SPEED * asteroidLevel) / FPS) *\r\n      (Math.random() < 0.5 ? 1 : -1),\r\n    r: r,\r\n    a: Math.PI * 2,\r\n    jaggedness: [],\r\n  };\r\n\r\n  for (let i = 0; i < ASTEROID_VERT; i++) {\r\n    asteroid.jaggedness.push(\r\n      Math.random() * ASTEROID_JAGGENDESS * 2 + 1 - ASTEROID_JAGGENDESS\r\n    );\r\n  }\r\n  return asteroid;\r\n}\r\n\r\nfunction destroyAsteroid(index) {\r\n  let x = asteroids[index].x;\r\n  let y = asteroids[index].y;\r\n  let r = asteroids[index].r;\r\n  crushing.play();\r\n\r\n  if (r == Math.ceil(ASTEROID_SIZE / 2)) {\r\n    score = score + POINTS_FOR_LARGE_ASTEROID;\r\n    asteroids.push(newAsteroid(x, y, Math.ceil(ASTEROID_SIZE / 4)));\r\n    asteroids.push(newAsteroid(x, y, Math.ceil(ASTEROID_SIZE / 4)));\r\n  } else {\r\n    score = score + POINTS_FOR_SMALL_ASTEROID;\r\n  }\r\n  asteroids.splice(index, 1);\r\n  if (asteroids.length === 0) {\r\n    level++;\r\n    nextLevel();\r\n  }\r\n}\r\n\r\nfunction explodeShip() {\r\n  ship.exploadingTime = Math.floor(SHIP_EXPLODEDURATION * FPS);\r\n  shipBlowingUp.play();\r\n}\r\n\r\nfunction safetyBuffer(x1, y1, x2, y2) {\r\n  let distansBetweenPoints = Math.sqrt(\r\n    Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)\r\n  );\r\n  return distansBetweenPoints;\r\n}\r\n\r\nfunction shootLaser() {\r\n  if (ship.canShoot) {\r\n    ship.lasers.push({\r\n      x: ship.x + (4 / 3) * ship.r * Math.cos(ship.a),\r\n      y: ship.y - (4 / 3) * ship.r * Math.sin(ship.a),\r\n      xv: (LASER_SPEED * Math.cos(ship.a)) / 50,\r\n      yv: -(LASER_SPEED * Math.sin(ship.a)) / 50,\r\n    });\r\n    shoot.play();\r\n  }\r\n  ship.canShoot = false;\r\n}\r\n\r\nfunction UPDATE() {\r\n  let blinkingOn = ship.blinkNum % INVISIBILITY === 0;\r\n  let exploding = ship.exploadingTime > 0;\r\n\r\n  // Draw Space\r\n  ctx.fillStyle = "black";\r\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n  // Draw the ship\r\n  if (!exploding) {\r\n    if (blinkingOn && !ship.dead) {\r\n      drawShip(ship.x, ship.y, ship.a);\r\n    }\r\n\r\n    // Blinking On\r\n    if (ship.blinkNum > 0) {\r\n      ship.blinkTime--;\r\n      if (ship.blinkTime === 0) {\r\n        ship.blinkTime = Math.floor(BLINK * FPS);\r\n        ship.blinkNum--;\r\n      }\r\n    }\r\n  }\r\n  // Explode ship\r\n  else {\r\n    ctx.beginPath();\r\n    ctx.arc(ship.x, ship.y, ship.r * 1, 7, Math.PI * 2, false);\r\n    ctx.fill();\r\n    ctx.fillStyle = "red";\r\n    ctx.beginPath();\r\n    ctx.arc(ship.x, ship.y, ship.r * 1.4, Math.PI * 2, false);\r\n    ctx.fill();\r\n    ctx.fillStyle = "orange";\r\n    ctx.beginPath();\r\n    ctx.arc(ship.x, ship.y, ship.r * 1.1, Math.PI * 2, false);\r\n    ctx.fill();\r\n    ctx.fillStyle = "yellow";\r\n    ctx.beginPath();\r\n    ctx.arc(ship.x, ship.y, ship.r * 0.8, Math.PI * 2, false);\r\n    ctx.fill();\r\n    ctx.fillStyle = "white";\r\n    ctx.beginPath();\r\n    ctx.arc(ship.x, ship.y, ship.r * 0.5, Math.PI * 2, false);\r\n    ctx.fill();\r\n  }\r\n\r\n  // Move forward in space\r\n  if (ship.moveForward) {\r\n    ship.forward.x += (SHIP_FORWARD * Math.cos(ship.a)) / 10;\r\n    ship.forward.y += (SHIP_FORWARD * Math.sin(ship.a)) / 10;\r\n    rocketThruster.play();\r\n\r\n    // Draw Turbo Buster\r\n    if (!exploding && blinkingOn) {\r\n      ctx.fillStyle = `hsl(${hue}, 100%, 50%)`;\r\n      ctx.strokeStyle = "yellow";\r\n      ctx.lineWidth = SHIP_SIZE / 15;\r\n      ctx.beginPath();\r\n      ctx.moveTo(\r\n        ship.x - ship.r * ((2 / 3) * Math.cos(ship.a) + 0.7 * Math.sin(ship.a)),\r\n        ship.y + ship.r * ((2 / 3) * Math.sin(ship.a) - 0.7 * Math.cos(ship.a))\r\n      );\r\n      ctx.lineTo(\r\n        ship.x - ship.r * 2 * Math.cos(ship.a),\r\n        ship.y + ship.r * 2 * Math.sin(ship.a)\r\n      );\r\n      ctx.lineTo(\r\n        ship.x - ship.r * ((2 / 3) * Math.cos(ship.a) - 0.7 * Math.sin(ship.a)),\r\n        ship.y + ship.r * ((2 / 3) * Math.sin(ship.a) + 0.7 * Math.cos(ship.a))\r\n      );\r\n      ctx.closePath();\r\n      ctx.fill();\r\n      ctx.stroke();\r\n    }\r\n  }\r\n  // Move return in space\r\n  else if (ship.moveReturn && blinkingOn) {\r\n    ship.forward.y -= (SHIP_FORWARD * Math.sin(ship.a)) / 10;\r\n    ship.forward.x -= (SHIP_FORWARD * Math.cos(ship.a)) / 10;\r\n    shipReturn.play();\r\n\r\n    // Draw buster in return\r\n    if (!exploding) {\r\n      ctx.fillStyle = `hsl(${hue}, 100%, 50%)`;\r\n      ctx.strokeStyle = "yellow";\r\n      ctx.lineWidth = SHIP_SIZE / 15;\r\n      ctx.beginPath();\r\n      ctx.moveTo(\r\n        ship.x - ship.r * ((2 / 3) * Math.cos(ship.a) + 0.7 * Math.sin(ship.a)),\r\n        ship.y + ship.r * ((2 / 3) * Math.sin(ship.a) - 0.7 * Math.cos(ship.a))\r\n      );\r\n      ctx.lineTo(\r\n        ship.x - ship.r * Math.cos(ship.a),\r\n        ship.y + ship.r * Math.sin(ship.a)\r\n      );\r\n      ctx.lineTo(\r\n        ship.x - ship.r * ((2 / 3) * Math.cos(ship.a) - 0.7 * Math.sin(ship.a)),\r\n        ship.y + ship.r * ((2 / 3) * Math.sin(ship.a) + 0.7 * Math.cos(ship.a))\r\n      );\r\n      ctx.closePath();\r\n      ctx.fill();\r\n      ctx.stroke();\r\n    }\r\n  } else {\r\n    ship.forward.x -= (ship.motion * ship.forward.x) / 5;\r\n    ship.forward.y -= (ship.motion * ship.forward.y) / 5;\r\n    rocketThruster.stop();\r\n    // shipReturn.stop();\r\n  }\r\n\r\n  // Draw Laser\r\n  for (let i = 0; i < ship.lasers.length; i++) {\r\n    ctx.fillStyle = "magenta";\r\n    ctx.beginPath();\r\n    ctx.arc(\r\n      ship.lasers[i].x,\r\n      ship.lasers[i].y,\r\n      SHIP_SIZE / 2,\r\n      Math.PI * 2,\r\n      0,\r\n      true\r\n    );\r\n    ctx.fill();\r\n  }\r\n  for (let i = 0; i < ship.lasers.length; i++) {\r\n    ship.lasers[i].x += ship.lasers[i].xv;\r\n    ship.lasers[i].y += ship.lasers[i].yv;\r\n  }\r\n\r\n  // Draw level text\r\n  if (textAlpha >= 0) {\r\n    ctx.textAlign = "center";\r\n    ctx.textBaseline = "middle";\r\n    ctx.fillStyle = "rgba(200, 200, 200, " + textAlpha + ")";\r\n    ctx.font = "normal 32px algerian ";\r\n    ctx.fillText(text, canvas.width / 2, canvas.height * 0.1);\r\n    textAlpha = textAlpha - 1.0 / TEXT_FADE_TIME / FPS;\r\n  } else if (ship.dead) {\r\n    newGame();\r\n  }\r\n\r\n  // Draw lives\r\n  for (let i = 0; i < lives; i++) {\r\n    livesColour = exploding && i === lives - 1 ? "green" : "lime";\r\n    drawShip(\r\n      SHIP_SIZE + i * SHIP_SIZE * 1.2,\r\n      SHIP_SIZE,\r\n      0.5 * Math.PI,\r\n      livesColour\r\n    );\r\n  }\r\n\r\n  // Draw Score\r\n  ctx.textAlign = "right";\r\n  ctx.textBaseline = "right";\r\n  ctx.fillStyle = "rgba(200, 200, 200)";\r\n  ctx.font = "normal 18px arial";\r\n  ctx.fillText("Score: " + score, canvas.width - SHIP_SIZE, SHIP_SIZE);\r\n\r\n  // Detect laser hits on asteroids\r\n  let asteroid_x, asteroid_y, asteroid_r, laser_x, laser_y;\r\n  for (let i = asteroids.length - 1; i >= 0; i--) {\r\n    asteroid_x = asteroids[i].x;\r\n    asteroid_y = asteroids[i].y;\r\n    asteroid_r = asteroids[i].r;\r\n\r\n    for (let j = ship.lasers.length - 1; j >= 0; j--) {\r\n      laser_x = ship.lasers[j].x;\r\n      laser_y = ship.lasers[j].y;\r\n\r\n      if (safetyBuffer(asteroid_x, asteroid_y, laser_x, laser_y) < asteroid_r) {\r\n        ship.lasers.splice(j, 1);\r\n        destroyAsteroid(i, 1);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Draw asteriods\r\n  let x, y, r, a, vert, jaggedness;\r\n  for (let i = 0; i < asteroids.length; i++) {\r\n    ctx.strokeStyle = `hsl(${hue}, 100%, 50%)`;\r\n    ctx.lineWidth = SHIP_SIZE / 20;\r\n    x = asteroids[i].x;\r\n    y = asteroids[i].y;\r\n    a = asteroids[i].a;\r\n    r = asteroids[i].r;\r\n    vert = asteroids[i].vertically;\r\n    jaggedness = asteroids[i].jaggedness;\r\n    ctx.beginPath();\r\n    ctx.moveTo(\r\n      x + r * jaggedness[0] * Math.cos(a),\r\n      y + r * jaggedness[0] * Math.sin(a)\r\n    );\r\n    for (let j = 1; j < vert; j++) {\r\n      ctx.lineTo(\r\n        x + r * jaggedness[j] * Math.cos(a + (j * Math.PI * 2) / vert),\r\n        y + r * jaggedness[j] * Math.sin(a + (j * Math.PI * 2) / vert)\r\n      );\r\n    }\r\n    ctx.closePath();\r\n    ctx.stroke();\r\n  }\r\n\r\n  // Check for collision\r\n  if (!exploding) {\r\n    if (ship.blinkNum === 0) {\r\n      for (let i = 0; i < asteroids.length; i++) {\r\n        if (\r\n          safetyBuffer(ship.x, ship.y, asteroids[i].x, asteroids[i].y) <\r\n          ship.r + asteroids[i].r\r\n        ) {\r\n          explodeShip();\r\n          destroyAsteroid(i);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Rotate Ship\r\n    ship.a = ship.a + ship.rotate;\r\n\r\n    // Motion Ship\r\n    ship.x = ship.x + ship.forward.x;\r\n    ship.y = ship.y - ship.forward.y;\r\n  } else {\r\n    ship.exploadingTime--;\r\n    if (ship.exploadingTime === 0) {\r\n      lives--;\r\n      if (lives === 0) {\r\n        gameOver();\r\n      } else {\r\n        ship = newShip();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Edge of screen\r\n  if (ship.x < 0 - ship.r) {\r\n    ship.x = canvas.width + ship.r;\r\n  } else if (ship.x > canvas.width + ship.r) {\r\n    ship.x = 0 - ship.r;\r\n  }\r\n  if (ship.y < 0 - ship.r) {\r\n    ship.y = canvas.height + ship.r;\r\n  } else if (ship.y > canvas.height + ship.r) {\r\n    ship.y = 0 - ship.r;\r\n  }\r\n\r\n  // Move the asteroids\r\n  for (let i = 0; i < asteroids.length; i++) {\r\n    asteroids[i].x = asteroids[i].x + asteroids[i].xv / 2;\r\n    asteroids[i].y = asteroids[i].y + asteroids[i].yv * 2;\r\n\r\n    // Edge of screen asteroids\r\n    if (asteroids[i].x < 0 - asteroids[i].r) {\r\n      asteroids[i].x = canvas.width + asteroids[i].r;\r\n    } else if (asteroids[i].x > canvas.width + asteroids[i].r) {\r\n      asteroids[i].x = 0 - asteroids[i].r;\r\n    }\r\n    if (asteroids[i].y < 0 - asteroids[i].r) {\r\n      asteroids[i].y = canvas.height + asteroids[i].r;\r\n    } else if (asteroids[i].y > canvas.height + asteroids[i].r) {\r\n      asteroids[i].y = 0 - asteroids[i].r;\r\n    }\r\n  }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')}]);